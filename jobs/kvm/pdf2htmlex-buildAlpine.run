#!/bin/bash

# This laminar run bash script automates the bulding, local installation, 
# and creation of a Container image for a particular Alpine release.

# The `DIST` environment variable is used to specify which Ubuntu release 
# will be used. (The default is `bionic`).

# The `REPO` environment variable is used to determine which pdf2htmlEX 
# github repository to download and build. (The default is 
# `stephengaito/pdf2htmlEX`). 

# The `PDF2HTMLEX_BRANCH` environment variable is used to determine which 
# branch/tag/commit of pdf2htmlEX to download and build. (The defualt is 
# `master`). 

# override the default CONTAINER_FROM setting so we can use alpine
#
export CONTAINER_FROM=alpine:$DIST

source setupLaminarVars

# Make sure that $WORKSPACE/$DIST exists BEFORE podman mounts it
#
mkdir -p $PWORKSPACE/$DIST

# IF we have already been run and built everything... simply exit ;-)
#
if test -f $PWORKSPACE/$DIST/reSourceVersionEnvs ; then
  #
  # Start the next stage...
  #
  laminarc queue pdf2htmlex-testContainerAlpine DIST=$DIST
  exit 0
fi

########################################################################
# Obtain the required git repositories (outside of any podman container)
#

# We meed to download pdf2htmlEX
#
git clone --depth=50 --branch=$PDF2HTMLEX_BRANCH  https://github.com/$REPO

cd $LAMINAR_RUNDIR/pdf2htmlEX

# The following is required for the buildScripts/createDebianPackage
# (we set it only for the pdf2htmlEX repository)
#
git config user.name "Stephen Gaito"
git config user.email "stephen@perceptisys.co.uk"

git checkout $PDF2HTMLEX_BRANCH

# Clone our (private) collection of PDF files for further testing
# (it is OK if we can"t)
#
cd $PWORKSPACE/$DIST
mkdir -p examples
if test -r $LAMINAR_HOME/cfg/tarArchives/pdf2htmlEX-examples.tar.gz ; then
  tar xvf $LAMINAR_HOME/cfg/tarArchives/pdf2htmlEX-examples.tar.gz \
    --directory=examples --strip-components=1
fi
  
###########################################################################
# Now do the build INSIDE inside a laminar_$DIST podman image as the 
# root user. 
#
# Explicitly mount /etc/localtime to keep focal's configuration of tzdata 
# happy ;-( 
#
cat <<PODMAN_SCRIPT > podmanScript
#!/bin/sh

# source $LAMINAR_RUNDIR/reSourceLaminarVars
. $LAMINAR_RUNDIR/reSourceLaminarVars

# This bash script is used *inside* a podman image to build pdf2htmlEX.

recordVar DEBIAN_FRONTEND noninteractive

cd $LAMINAR_RUNDIR/pdf2htmlEX

# Now we start the build process
#
failResult ./buildScripts/buildInstallLocallyAlpine

# Now we need to make copies of the test data for use later...
#
mkdir -p $PWORKSPACE/$DIST/container
cp -R pdf2htmlEX/test               $PWORKSPACE/$DIST/container
cp -R pdf2htmlEX/share              $PWORKSPACE/$DIST/container
#
mkdir -p $PWORKSPACE/$DIST/native
cp -R pdf2htmlEX/test               $PWORKSPACE/$DIST/native
cp -R pdf2htmlEX/share              $PWORKSPACE/$DIST/native
#
# Now we create the release artifacts
# (starting with those we can put together inside a podman container)
#
recordVar CONTAINER_FROM $CONTAINER_FROM
recordVar DOCKER_HUB_USERNAME $DOCKER_HUB_USERNAME

failResult ./buildScripts/createAlpineTarFile

# Now we want to run the native tests (we do this AFTER creating the 
# artifacts so we do not polute the installed packages). 
#
cd $PWORKSPACE/$DIST/native/test

recordVar PDF2HTMLEX_PATH   /usr/local/bin/pdf2htmlEX
recordVar PDF2HTMLEX_TMPDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/tmp
recordVar PDF2HTMLEX_DATDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/dat
recordVar PDF2HTMLEX_PNGDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/png
recordVar PDF2HTMLEX_OUTDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/out
recordVar PDF2HTMLEX_PREDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/pre
recordVar PDF2HTMLEX_HTMDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/html
recordVar PDF2HTMLEX_EXPDIR \$LAMINAR_RUNDIR/tmp/pdf2htmlEX/examples

mkdir -p \$PDF2HTMLEX_TMPDIR
mkdir -p \$PDF2HTMLEX_DATDIR
mkdir -p \$PDF2HTMLEX_PNGDIR
mkdir -p \$PDF2HTMLEX_OUTDIR
mkdir -p \$PDF2HTMLEX_PREDIR
mkdir -p \$PDF2HTMLEX_HTMDIR
mkdir -p \$PDF2HTMLEX_EXPDIR

recordVar WEBFSD_DIR $PWORKSPACE/html/$DIST/native
mkdir -p \$WEBFSD_DIR

acceptResult ./runLocalTestsShell

if test -x $PWORKSPACE/$DIST/examples/binFiles/produceHtmlFromPdfFiles ; then
  cd $PWORKSPACE/$DIST/examples
  acceptResult ./binFiles/produceHtmlFromPdfFiles
  cp -R \$PDF2HTMLEX_EXPDIR \$WEBFSD_DIR
fi

cd $PWORKSPACE/$DIST/native/test

acceptResult ./produceHtmlForBrowserTests

recordVar BROWSER_TEST_DIR \$WEBFSD_DIR/browserTests
mkdir -p \$BROWSER_TEST_DIR/pdfFiles
cp -R \$PDF2HTMLEX_HTMDIR \$BROWSER_TEST_DIR
cp -R \$PDF2HTMLEX_PNGDIR \$BROWSER_TEST_DIR
cp -R browser_tests/*.pdf \$BROWSER_TEST_DIR/pdfFiles

reportResults

PODMAN_SCRIPT

chmod a+x podmanScript

rootPodman laminar_$DIST ./podmanScript

#######################################################################
# Now run all build scripts which must be run *outside* of any podman 
# container.
#

# In our case, we only have to run:
#
cd $LAMINAR_RUNDIR/pdf2htmlEX
acceptResult ./buildScripts/createContainerAlpineImageFromTarFile

###########################################################################
# We run the following PODMAN_SCRIPT inside the laminar_focal podman 
# image as the root user. 
#
cat  <<PODMAN_SCRIPT > finishLocalBrowserTestsContainerScript
#!/bin/bash

source $LAMINAR_RUNDIR/reSourceLaminarVars

# Now load the extra pacakages (which might include fonts) to run the 
# browser based tests. 
#
recordVar DEBIAN_FRONTEND noninteractive

cd $PWORKSPACE/$DIST/native/test

failResult ./installAutomaticTestSoftwareApt

echo "PDF2HTMLEX_PATH: [$PDF2HTMLEX_PATH]"

cp test.py.in test.py
sed "s:@PDF2HTMLEX_PATH@:/bin/true:"             -i test.py
sed "s:@PDF2HTMLEX_TMPDIR@:\$PDF2HTMLEX_TMPDIR:" -i test.py
sed "s:@PDF2HTMLEX_DATDIR@:\$PDF2HTMLEX_DATDIR:" -i test.py
sed "s:@PDF2HTMLEX_PNGDIR@:\$PDF2HTMLEX_PNGDIR:" -i test.py
sed "s:@PDF2HTMLEX_OUTDIR@:\$PDF2HTMLEX_OUTDIR:" -i test.py
sed "s:@PDF2HTMLEX_PREDIR@:\$PDF2HTMLEX_PREDIR:" -i test.py
sed "s:@PDF2HTMLEX_HTMDIR@:\$PDF2HTMLEX_HTMDIR:" -i test.py

acceptResult ./runLocalBrowserTests

recordVar BROWSER_TEST_DIR \$WEBFSD_DIR/browserTests
mkdir -p \$BROWSER_TEST_DIR/pdfFiles
cp -R \$PDF2HTMLEX_HTMDIR \$BROWSER_TEST_DIR
cp -R \$PDF2HTMLEX_PNGDIR \$BROWSER_TEST_DIR
cp -R browser_tests/*.pdf \$BROWSER_TEST_DIR/pdfFiles

reportResults

PODMAN_SCRIPT

chmod a+x finishLocalBrowserTestsContainerScript

# Since we are testing the html generated which has already been generated 
# by an Alpine base Container image... we *can* run the final python3 diffing 
# inside an Ubuntu Focal based podman image... 
#
rootPodman                                                                 \
  -v $LAMINAR_RUNDIR/tmp/pdf2htmlEX/tmp:$LAMINAR_RUNDIR/tmp/pdf2htmlEX/tmp \
  laminar_focal ./finishLocalBrowserTestsContainerScript

#########################################################################
# Now we copy the pdf2htmlex project release/test objects/directories to 
# the project workspace. 
#

cd $LAMINAR_RUNDIR/pdf2htmlEX
source buildScripts/reSourceVersionEnvs

cp imageBuild/$ALPINE_NAME.tar.gz  $PWORKSPACE/$DIST
cp imageBuild/$ALPINE_NAME.install $PWORKSPACE/$DIST

# and lastly copy the marker we use to skip re-building
#

cp buildScripts/reSourceVersionEnvs $PWORKSPACE/$DIST

reportResults

# Start the next stage...
#
laminarc queue pdf2htmlex-testContainerAlpine DIST=$DIST
