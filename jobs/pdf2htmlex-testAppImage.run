#!/bin/bash

# This Laminar bash script automates the testing of AppImages

# The `DIST` environment variable is used to specify which Ubuntu release 
# will be used. (The default is `bionic`).

source setupLaminarVars

# Make sure that $WORKSPACE/$DIST exists BEFORE docker mounts it
#
mkdir -p $PWORKSPACE/$DIST

source $PWORKSPACE/$DIST/reSourceVersionEnvs

###########################################################################
# We run the following DOCKER_SCRIPT inside the laminar_dev_$DIST docker 
# image as the dev user. 
#
cat <<DOCKER_SCRIPT > dockerScript
#!/bin/bash

source $LAMINAR_RUNDIR/reSourceLaminarVars

# This bash script is used *inside* a docker image to test the AppImage 
# version of pdf2htmlEX. 

# We need to install all packages that the pdf2htmlEX AppImage assumes 
# will be on the host machine. 
#
recordVar DEBIAN_FRONTEND noninteractive
#
sudo apt update
sudo apt -y install libfontconfig1
#   fontconfig-config fonts-dejavu-core libfreetype6 libpng16-16 ucf
sudo apt -y install libglib2.0-0
#   libglib2.0-data libicu60 libxml2 shared-mime-info xdg-user-dirs
sudo apt -y install libxcb1
#   libbsd0 libxau6 libxdmcp6 multiarch-support
sudo apt -y install libx11-6
#   libx11-data

cd $LAMINAR_RUNDIR

# Now (since we are running *inside* a docker container which can't use 
# FUSE) we need to manually extract the AppImage's contents...
#
$PWORKSPACE/$DIST/$APPIMAGE_NAME --appimage-extract

cd $PWORKSPACE/$DIST/appImage/test

recordVar PDF2HTMLEX_PATH   $LAMINAR_RUNDIR/squashfs-root/AppRun
recordVar PDF2HTMLEX_TMPDIR /tmp/pdf2htmlEX/tmp
recordVar PDF2HTMLEX_DATDIR /tmp/pdf2htmlEX/dat
recordVar PDF2HTMLEX_PNGDIR /tmp/pdf2htmlEX/png
recordVar PDF2HTMLEX_OUTDIR /tmp/pdf2htmlEX/out
recordVar PDF2HTMLEX_PREDIR /tmp/pdf2htmlEX/pre
recordVar PDF2HTMLEX_HTMDIR /tmp/pdf2htmlEX/html
recordVar PDF2HTMLEX_EXPDIR /tmp/pdf2htmlEX/examples

mkdir -p \$PDF2HTMLEX_TMPDIR
mkdir -p \$PDF2HTMLEX_DATDIR
mkdir -p \$PDF2HTMLEX_PNGDIR
mkdir -p \$PDF2HTMLEX_OUTDIR
mkdir -p \$PDF2HTMLEX_PREDIR
mkdir -p \$PDF2HTMLEX_HTMDIR
mkdir -p \$PDF2HTMLEX_EXPDIR

recordVar WEBFSD_DIR $PWORKSPACE/html/$DIST/appImage
mkdir -p \$WEBFSD_DIR

# run local tests using only bash and pdf2htmlEX
#
acceptResult ./runLocalTestsBash

if test -x $PWORKSPACE/$DIST/examples/binFiles/produceHtmlFromPdfFiles ; then
  recordVar PDF2HTMLEX_PATH "$LAMINAR_RUNDIR/squashfs-root/AppRun --data-dir=$LAMINAR_RUNDIR/squashfs-root/usr/local/share/pdf2htmlEX"
  pushd $PWORKSPACE/$DIST/examples
  acceptResult ./binFiles/produceHtmlFromPdfFiles
  cp -R \$PDF2HTMLEX_EXPDIR \$WEBFSD_DIR
  popd
fi

acceptResult ./produceHtmlForBrowserTests

# Now load the extra pacakages (which might include fonts) to run the 
# browser based tests. 
#
failResult ./installAutomaticTestSoftware

cp test.py.in test.py
sed "s:@PDF2HTMLEX_PATH@:\$PDF2HTMLEX_PATH:"     -i test.py
sed "s:@PDF2HTMLEX_TMPDIR@:\$PDF2HTMLEX_TMPDIR:" -i test.py
sed "s:@PDF2HTMLEX_DATDIR@:\$PDF2HTMLEX_DATDIR:" -i test.py
sed "s:@PDF2HTMLEX_PNGDIR@:\$PDF2HTMLEX_PNGDIR:" -i test.py
sed "s:@PDF2HTMLEX_OUTDIR@:\$PDF2HTMLEX_OUTDIR:" -i test.py
sed "s:@PDF2HTMLEX_PREDIR@:\$PDF2HTMLEX_PREDIR:" -i test.py
sed "s:@PDF2HTMLEX_HTMDIR@:\$PDF2HTMLEX_HTMDIR:" -i test.py

acceptResult ./runLocalBrowserTests

export BROWSER_TEST_DIR=\$WEBFSD_DIR/browserTests
mkdir -p \$BROWSER_TEST_DIR/pdfFiles
cp -R \$PDF2HTMLEX_HTMDIR \$BROWSER_TEST_DIR
cp -R \$PDF2HTMLEX_PNGDIR \$BROWSER_TEST_DIR
cp -R browser_tests/*.pdf \$BROWSER_TEST_DIR/pdfFiles

reportResults

DOCKER_SCRIPT

chmod a+x dockerScript

devDocker laminar_dev_$DIST ./dockerScript
